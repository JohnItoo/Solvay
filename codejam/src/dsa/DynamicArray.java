package dsa;public class DynamicArray {    public static void main(String[] args) {        CustomList list = new CustomList();        list.add(1); list.add(2);        System.out.print(list.get(1));    }    public static class CustomLinkedList {        public  Node node;    }    public  static  class Node {        Node next;        int value;        public Node(int x) {            this.value = x;        }        public void append(int x) {            Node newNode = new Node(x);            Node currentNode = this;            while(currentNode.next != null) {                currentNode = currentNode.next;            }            currentNode.next = newNode;        }        public Node deleteNode(Node n, int value) {            Node head = n;            if(n.value == value) {               return head.next;            }            while(n.next != null) {                if(n.next.value == value) {                    n.next = n.next.next;                    return head;                }                n = n.next;            }            return head;        }    }    public static class CustomList {        public int length = 4;        int[] underlyingArray = new int[length];        int index = 0;        public void add(int element) {            underlyingArray[index++] = element;            if(index == length) resize();        }        public void add(int element, int index) {            checkIndex(index);            underlyingArray[index] = element;        }        public int get(int index) {            checkIndex(index);            return underlyingArray[index];        }        public void remove(int index) {            checkIndex(index);            for(int i = index; i < length-1; i++) {                underlyingArray[i] = underlyingArray[i+1];            }            length -= 1;            underlyingArray[length-1] = -1;        }        private void checkIndex(int index) {            if(index <= 0 || index >= length) throw new RuntimeException("No element at this index");        }        public void resize() {            int[] newUnderlying = new int[length*2];            for(int i = 0; i<length; i++) {                newUnderlying[i] = underlyingArray[i];            }            length *= 2;            underlyingArray = newUnderlying;        }    }}